CC := clang -target x86_64-unknown-windows
LD := lld-link
AS := nasm
AR := llvm-ar
OBJCOPY := llvm-objcopy

CFLAGS := -O0 -g
CHARDFLAGS := -ffreestanding -fno-stack-protector -fshort-wchar -mno-red-zone -Istage1/uefi -Icommon -Iexternal/gnu-efi/inc -Iexternal/gnu-efi/inc/x86_64 -Iexternal/gnu-efi/inc/protocol
LDFLAGS :=
LDHARDFLAGS := /subsystem:efi_application /nodefaultlib /entry:efi_main
ASFLAGS :=

COMMON_SRC := $(wildcard common/*.c common/*/*.c)
COMMON_OBJ := $(patsubst common/%, build/common/uefi/%.obj, $(COMMON_SRC:%.c=%))

STAGE1_SRC := $(wildcard stage1/uefi/*.c stage1/uefi/*/*.c stage1/uefi/*.s stage1/uefi/*/*.s)
STAGE1_OBJ := $(patsubst stage1/uefi/%, build/stage1/uefi/%.obj, $(STAGE1_SRC:%.c=%))
STAGE1_OBJ += $(patsubst stage1/uefi/%, build/stage1/uefi/%.obj, $(STAGE1_OBJ:%.s=%))

all: $(shell mkdir -p build/stage1/uefi build/common/uefi) build/xeptoboot.efi

build/xeptoboot.efi: $(COMMON_OBJ) $(STAGE1_OBJ)
	$(LD) $(LDFLAGS) $(LDHARDFLAGS) $^ /out:$@

build/stage1/uefi/%.s.obj: stage1/uefi/%.s
	$(AS) $< $(ASFLAGS) -f win64 -o $@

build/stage1/uefi/%.obj: stage1/uefi/%.c
	$(CC) $(CFLAGS) $(CHARDFLAGS) -c $< -o $@

build/common/uefi/%.obj: common/%.c
	$(CC) $(CFLAGS) $(CHARDFLAGS) -c $< -o $@

run: build/xeptoboot.efi
	mkdir -p build/efi-root/EFI/BOOT
	clang -target x86_64-elf -ffreestanding -fshort-wchar -mno-red-zone -c kernel-example/main.c -o build/efi-root/kernel.o
	ld.lld -Tkernel-example/linker.ld -static -Bsymbolic -nostdlib build/efi-root/kernel.o -o build/efi-root/kernel.elf
	cp $< build/efi-root/EFI/BOOT/BOOTX64.EFI
	qemu-system-x86_64 -hda fat:rw:build/efi-root -pflash external/ovmf-prebuilt/bin/DEBUGX64_OVMF.fd -debugcon stdio

clean:
	$(RM)r build/stage1/uefi build/common/uefi
